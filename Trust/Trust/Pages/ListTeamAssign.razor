@page "/listTeamAssign"
@inject ITeamAssignService TeamAssignService
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>
<a class="btn btn-primary" href='/addTeamAssign'>Add new TeamAssign</a>
@if (teamAssigns == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row col-md-3 pull-right">
        <input type="text" id="txtSearch"
               placeholder="Search Titles..." class="form-control"
               @bind="SearchTerm" @bind:event="oninput" />
    </div>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th"
                    @onclick="@(() => SortTable("AssignId"))">
                    AssignId
                    <span class="fa @(SetSortIcon("AssignId"))"></span>
                </th>
                <th class="sort-th"
                    @onclick="@(() => SortTable("UserId"))">
                    User
                    <span class="fa @(SetSortIcon("UserId"))"></span>
                </th>





                @*<th class="sort-th"
                    @onclick="@(() => SortTable("TeamId"))">
                    Team
                    <span class="fa @(SetSortIcon("TeamId"))"></span>
                </th>*@
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (teamAssigns == null || teamAssigns.Count == 0)
            {
                <tr>
                    <td colspan="3">
                        No Records to display
                    </td>
                </tr>
            }
            else
            {
                int prevAssignId = 0;
                foreach (var teamAssign in teamAssigns)
                {
                    if (teamAssign.AssignId != prevAssignId)
                    {
                        <tr>
                            <td>
                                <hr style="padding:0px; margin:0px;">
                                @teamAssign.AssignId
                            </td>
                            
                            <td>
                                <hr style="padding:0px; margin:0px;">
                                @teamAssign.UserId
                            </td>

                           
                            @*<td>
                                <hr style="padding:0px; margin:0px;">
                                @teamAssign.TeamId
                            </td>*@
                            <td>
                                <hr style="padding:0px; margin:0px;">
                                <a class="btn btn-primary"
                                   href='/editTeamAssign/@teamAssign.AssignId'>
                                    &#8194;Edit&#8194;
                                </a>&#8194;
                                @*<a class="btn btn-danger" @onclick="() =>
                           DeleteTeamAssign((int)teamAssign.AssignId)">Delete</a>*@
                            </td>

                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td></td>
                            <td></td>
                            <td>
                                <hr style="padding:0px; margin:0px;">
                                @teamAssign.UserId
                            </td>
                        </tr>
                    }
                    prevAssignId = (int)teamAssign.AssignId;
                }
            }
        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-custom" @onclick=@(async ()=>
              await NavigateToPage("previous"))>
            ◀
        </button>
        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton
                 @(currentPage==curPage?"btn-info":"")"
                    @onclick=@(async () =>
                 await refreshRecords(currentPage))>
                @currentPage
            </button>
        }
        <button class="btn btn-custom" @onclick=@(async ()=>
              await NavigateToPage("next"))>
            ▶
        </button>
    </div>
}
@code {
    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; FilterRecords(); }
    }
    List<TeamAssignUs> teamAssigns;
    #region Pagination
    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "AssignId";
    string sortDir = "DESC";
    #endregion
    protected override async Task OnInitializedAsync()
    {
        //display total page buttons
        pagerSize = 3;
        pageSize = 8;
        curPage = 1;
        teamAssigns = await TeamAssignService.ListAll((curPage - 1) * pageSize,
                pageSize, sortColumnName, sortDir, searchTerm);
        totalRecords = await TeamAssignService.Count(searchTerm);
        totalPages = (int)Math.Ceiling
                     (totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }
    protected async Task DeleteProject(int AssignId)
    {
        await TeamAssignService.Delete(AssignId);
        teamAssigns = await TeamAssignService.ListAll((curPage - 1) * pageSize,
                pageSize, sortColumnName, sortDir, searchTerm);
    }
    private bool isSortedAscending;
    private string activeSortColumn;
    private async Task<List<TeamAssignUs>> SortRecords
            (string columnName, string dir)
    {
        return await TeamAssignService.ListAll((curPage - 1) * pageSize,
               pageSize, columnName, dir, searchTerm);
    }
    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            teamAssigns = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                teamAssigns = await SortRecords(columnName, "DESC");
            }
            else
            {
                teamAssigns = await SortRecords(columnName, "ASC");
            }
            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
    public async Task refreshRecords(int currentPage)
    {
        teamAssigns = await TeamAssignService.ListAll((currentPage - 1)
           * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }
    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }
    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }
    public void FilterRecords()
    {
        endPage = 0;
        this.OnInitializedAsync().Wait();
    }
}